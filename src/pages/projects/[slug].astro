---
import { getCollection } from 'astro:content'
import { Image } from 'astro:assets'
import MdxImage from '~components/mdx/image.astro';
import LogosSvelteIcon from '~icons/logos/svelte-icon'
import GgGlobeAlt from '~icons/gg/globe-alt'
import LogosGithubIcon from '~icons/logos/github-icon'
import DefaultLayout from '~/layouts/default.astro'
import projExample from '~/assets/projects/nam-cover.png'
import { removeHttp } from '~utils/url'
import Blockquote from '~components/mdx/blockquote.astro'

export async function getStaticPaths() {
  const projects = await getCollection('projects')
  return projects.map(project => ({ params: { slug: project.slug }, props: { entry: project }}))
}

const { entry } = Astro.props
const { Content } = await entry.render()

const favicon = entry.data.demoUrl + `/${entry.data.faviconPath}`
---

<DefaultLayout>
  <div class="container">
    <article>
      <div class="project-title">
        <Image src={favicon} alt={`${entry.data.title} favicon`} width="30" height="30"   />
        <h1>{entry.data.title}</h1>
      </div>
      <div class="project-side">
        <Image src={projExample} class="cover" alt="Example project" />
        <div class="meta">
          <div class="stack">
            <h4>Tech stacks</h4>
            <div class="tech">
              <div><LogosSvelteIcon /> Svelte</div>
              <div><LogosSvelteIcon /> Svelte</div>
              <div><LogosSvelteIcon /> Svelte</div>
            </div>
          </div>
          {entry.data.demoUrl ? (
            <div class="stack">
              <h4>Demo</h4>
              <a href={entry.data.demoUrl}><GgGlobeAlt /> {removeHttp(entry.data.demoUrl)}</a>
            </div>
          ) : null}
          {entry.data.sourceUrl ? (
            <div class="stack">
              <h4>Source</h4>
              <a href={entry.data.sourceUrl}><LogosGithubIcon /> Github</a>
            </div>
          ) : null}
          <div class="stack">
            <h4>Year</h4>
            <p>{new Date(entry.data.releaseDate).getFullYear()}</p>
          </div>
        </div>
      </div>
      <div class="prose">
        <Content components={{ blockquote: Blockquote, img: MdxImage }} />
      </div>
    </article>
  </div>
</DefaultLayout>

<style is:global lang="scss">
@use '../../styles/breakpoints' as br;
@use '../../styles/typography';

.container {
  margin-top: 2rem;
  max-width: var(--over-mw);
}

.project-title {
  display: flex;
  align-items: center;
  gap: 1rem;

  h1 {
    font-size: 2.25rem;
  }

}

.project-side {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: .375rem;

  @include br.tablet {
    gap: 2rem;
    flex-direction: row;
    justify-content: space-between;
  }

  .cover {
    width: 100%;
    height: 230px;
    border-radius: 0.3125rem;

    @include br.tablet {
      width: 550px;
      height: 330px;
    }

    @include br.desktop {
      width: 660px;
      height: 380px;
    }
  }

  .meta {
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: .8rem;
    background: var(--slate-3);
    border: 1px solid var(--slate-6);
    border-radius: .25rem;
    padding: 1rem;

    @include br.tablet {
      gap: .5rem;
      padding: 1.2rem;
      min-height: 330px;
    }

    @include br.desktop {
      gap: 1rem;
      width: 400px;
      min-height: 380px;
    }

    & h4 {
      font-family: var(--font-body);
      margin-bottom: .2rem;
    }

    a {
      color: var(--fc-primary);
      text-decoration: none;
      display: flex;
      gap: .2rem;

      &:hover {
        text-decoration: underline;
      }
    }
  }
}

.stack {
  display: flex;
  flex-direction: column;
}

.tech {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: .5rem;

  & > div {
    display: flex;
    gap: .2rem;
  }
}

.prose {
  margin-top: 1.5rem;
  max-width: 550px;

  @include br.desktop {
    max-width: 660px;
  }
}
</style>
